import funkin.play.PlayState;
import funkin.modding.module.Module;
import flixel.FlxG;
import funkin.play.notes.Strumline;
import funkin.util.Constants;
import funkin.Preferences;
import StringTools;
import flixel.text.FlxText;
import flixel.tweens.FlxTween;
import flixel.tweens.FlxEase;

class Middlescroll extends Module {
	var isPixel:Int = false;

	var playerStrumline:FlxSprite;
	var opponentStrumline:FlxSprite;

	var differentLanes = false;
	var noteSpacing = 0;

	public static var mobilepos = 0;

	var originalcoverx:Float = 0;

	var coverPositions = [];
	var oldOppPositions = [];
	var oldOppCoverPositions = [0,0];



	function new() {
		super("Middlescroll");
	}
	
	// ----- Override Functions
	override function onUpdate() {

		if (PlayState.instance != null && !PlayState.instance.isInCutscene) {

			if (FlxG.save.data.middlescroll != "Off" ) {
				if (Preferences.controlsScheme == "Arrows")
				{
					updateNoteCovers(playerStrumline, true);
				}
				else if (FlxG.save.data.middlescroll == "Wide Lanes")
				{
					updateNoteCovers(playerStrumline, true);
					// updateNoteCovers(opponentStrumline);
				}
				else
				{
					// updateNoteCovers(opponentStrumline);
				}
			}
		
			// updateNoteCovers(playerStrumline, true);

			updateNoteCovers(opponentStrumline);

		}

		super.onUpdate();

	}


	override function onCountdownStart(event) {
		super.onCountdownStart(event);
		originalcoverx = 0;
		coverPositions = [];
		oldOppPositions = [];
		oldOppCoverPositions = [0,0];

	

		if (FlxG.save.data.middlescroll == "Wide Lanes" || FlxG.save.data.middlescroll == "Narrow Lanes")
		{
			differentLanes = true;
		}
		else
		{
			differentLanes = false;
		}

		playerStrumline = PlayState.instance.playerStrumline;
		opponentStrumline = PlayState.instance.opponentStrumline;


		isPixel = playerStrumline.noteStyle.isHoldNotePixel();

		if (FlxG.save.data.movepopups) {
			// Taken from Blazin'
			PlayState.instance.comboPopUps.offsets = [480, -50];
		}


		if (FlxG.save.data.middlescroll != "Off") {
			setPlayerStrumline();
			if (Preferences.controlsScheme != "Arrows")
			{
				moveOpponentStrumline();
			}
		}

		switch (FlxG.save.data.oppnotes)
		{
			case "Hidden":
				// Taken from Blazin'
				if (opponentStrumline != null) {
					opponentStrumline.visible = false;
				}	
			case "Translucent":
				opponentStrumline.strumlineNotes.alpha = 0.5;
				opponentStrumline.noteHoldCovers.alpha = 0.5;
				opponentStrumline.notes.alpha = 0.5;
				// Use custom animation when spawning in strumline notes.
				for (arrow in opponentStrumline.strumlineNotes)
				{
					FlxTween.cancelTweensOf(arrow);
					arrow.alpha = 0.0;
					FlxTween.tween(arrow, {y: arrow.y + 10, alpha: 0.5}, 1, {ease: FlxEase.circOut, startDelay: 0.5 + (0.2 * arrow.direction)});
				}
		}
			
		

	}

	
    override function onStateChangeEnd(event)
    {
        super.onStateChangeEnd(event);
		if (Preferences.controlsScheme == "Arrows")
		{
			Preferences.controlsScheme == "Arrows" = true;	
		}
	}

	override function onNoteIncoming(event) {

		super.onNoteIncoming(event);

		if (Preferences.controlsScheme == "Arrows" || differentLanes)
		{
			if (event.note.noteData.getMustHitNote())
			{

		
				// Previous method done with help from Mofoy on GameBanana (https://gamebanana.com/members/4648991)

				// if (Preferences.controlsScheme == "Arrows")
				// {
				// 	event.note.x = playerStrumline.strumlineNotes.members[0].x;
				// 	if (playerStrumline.noteStyle.getName() == "Funkin'")
				// 	{
				// 		event.note.x += event.note.offset.x + Strumline.NUDGE;
				// 	}
				// }
				// else
				// {
				// 	event.note.x = playerStrumline.x;
				// }			
				event.note.x += (event.note.direction * (Strumline.STRUMLINE_SIZE + noteSpacing));

				if (Preferences.controlsScheme == "Arrows" && event.note.direction > 1)
				{
					event.note.x -= mobilepos * 3;
				}

				// if (event.note.offset.x >= 40)
				// {
				// 	event.note.x -= event.note.offset.x;
				// }
				// if (event.note.get_kind() == "trickydeath")
				// {
				// 	event.note.x -= (playerStrumline.strumlineNotes.members[0].width / 2) - 15;
				// }


				if (event.note.holdNoteSprite != null)
				{
					var hold = event.note.holdNoteSprite;
					hold.x = (event.note.x + (event.note.width / 2)) - (hold.width / 2);
				}
			}
		}
	
		
		if (Preferences.controlsScheme != "Arrows")
		{
			if (!event.note.noteData.getMustHitNote())
			{
				if (event.note.direction > 1)
				{
					// event.note.x = opponentStrumline.strumlineNotes.members[event.note.direction].x + dist;

					var dist = opponentStrumline.strumlineNotes.members[2].x - opponentStrumline.strumlineNotes.members[1].x;// opponentStrumline.strumlineNotes.members[event.note.direction].x - event.note.x;

					event.note.x += dist;
					// event.note.x -= Constants.STRUMLINE_X_OFFSET * 2.3;
					event.note.x -= Strumline.STRUMLINE_SIZE;
					// if (event.note.direction == 2)
					// {
					event.note.x -= Strumline.NUDGE * 3;
					// }
					// else if (event.note.direction == 3)
					// {
					// 	event.note.x -= event.note.scale.x + 0.5;
					// }


					// event.note.x += dist;
					// event.note.x = opponentStrumline.strumlineNotes.members[0].x + opponentStrumline.x;
					// opponentNote.x -= (opponentNote.width - (opponentStrumline.noteStyle.getStrumlineOffsets()[0] + opponentNote.offset.x)) * (4 - i);


					if (event.note.holdNoteSprite != null)
					{
						var hold = event.note.holdNoteSprite;
					
						hold.x = (event.note.x + (event.note.width / 2)) - (hold.width / 2);						
					}
				}
				
				if (FlxG.save.data.oppnotes == "Translucent") 
				{
					if (opponentStrumline != null)
					{
						opponentStrumline.holdNotes.forEach(function(hold){
							hold.alpha = 0.5;
						});
					}
			
				}
		
			}
		}
			
	}

	override function onNoteHit(event)
	{
		super.onNoteHit(event);


		if (FlxG.save.data.middlescroll != "Off")
		{
			if (event.doesNotesplash)
			{
				if (Preferences.controlsScheme == "Arrows" || differentLanes)
				{				
					event.doesNotesplash = false;
					playerStrumline.playNoteSplash(event.note.direction);
					for (splash in playerStrumline.noteSplashes)
					{
						var direction = 0;

						if (StringTools.contains(splash.animation.name, "LEFT"))
						{
							direction = 0;
						}
						else if (StringTools.contains(splash.animation.name, "DOWN"))
						{
							direction = 1;
						}
						else if (StringTools.contains(splash.animation.name, "UP"))
						{
							direction = 2;
						}
						else if (StringTools.contains(splash.animation.name, "RIGHT"))
						{
							direction = 3;
						}
						if (event.note.direction == direction)
						{
							splash.x = event.note.x + (playerStrumline.noteStyle.getSplashOffsets()[0] * 1.75);
						}

					}
				}
			
			}
		}

	}

	// ----- Custom Functions

	function setPlayerStrumline()
	{
		// Previous version done with help from Mofoy on GameBanana (https://gamebanana.com/members/4648991)
		switch (FlxG.save.data.middlescroll)
		{
			case "Wide Lanes":
				if (Preferences.controlsScheme == "Arrows")
				{
					noteSpacing = 80;
				}
				else
				{
					noteSpacing = 60;
				}
			case "Narrow Lanes":
				noteSpacing = 30;
			default:
				if (Preferences.controlsScheme == "Arrows")
				{
					noteSpacing = 45;
				}
				else
				{
					noteSpacing = 0;
				}
		}		

		// 

		for (i in 0...Strumline.KEY_COUNT)
		{
			coverPositions.push(i * (Strumline.STRUMLINE_SIZE + noteSpacing));
		}
	
		if (Preferences.controlsScheme == "Arrows")
		{
			mobilepos = 35 * (FlxG.width / FlxG.height) / (FlxG.initialWidth / FlxG.initialHeight);
		}
	
		if (Preferences.controlsScheme == "Arrows" || differentLanes)
		{
			
			positionStrumline(playerStrumline, noteSpacing);
		

			playerStrumline.background.setGraphicSize(4 * (Strumline.STRUMLINE_SIZE + (noteSpacing / 1.3)) + (Strumline.BACKGROUND_PAD * 2) + (mobilepos / 1.6), FlxG.height + 50);
			playerStrumline.background.updateHitbox();


		
			// playerStrumline.x += playerStrumline.noteStyle.getStrumlineOffsets()[0];
			// playerStrumline.x += playerStrumline.strumlineNotes.members[0].width;
			// 						event.note.x += event.note.offset.x + Strumline.NUDGE;

		}
		else 
		{
			playerStrumline.x = (FlxG.width - playerStrumline.width) / 2;
		}
		

		// playerStrumline.x = (FlxG.width - playerStrumline.width) / 2;


		switch (FlxG.save.data.noteEffects)
		{
			case "None":
				playerStrumline.noteHoldCovers.visible = false;
				playerStrumline.noteSplashes.visible = false;
			case "Splashes Only":
				playerStrumline.noteHoldCovers.visible = false;
				playerStrumline.noteSplashes.visible = true;
			case "Hold Covers Only":
				playerStrumline.noteHoldCovers.visible = true;
				playerStrumline.noteSplashes.visible = false;
			case "All":
				playerStrumline.noteHoldCovers.visible = true;
				playerStrumline.noteSplashes.visible = true;
		}
	

	}

	function moveOpponentStrumline() {
		opponentStrumline.remove(opponentStrumline.background);

		if (opponentStrumline != null) {
			for (i in 2...opponentStrumline.strumlineNotes.length) {
				var opponentNote = opponentStrumline.strumlineNotes.members[i];
				oldOppPositions.push(opponentNote.x);
				// opponentNote.x = FlxG.width;
				// if (opponentStrumline.noteStyle.getStrumlineOffsets()[0] == 0)
				// {
				// 	opponentNote.x -= (opponentNote.width - opponentNote.offset.x);
				// }
				// else
				// {
				// opponentNote.x -= opponentNote.width;
				// }
				// opponentNote.x -= Constants.STRUMLINE_X_OFFSET;
				// opponentNote.x -= (opponentNote.width * 1.1) * (3 - i);
				// if (opponentNote.direction == 2)
				// {
				// 	opponentNote.x -= opponentNote.width;
				// 	opponentNote.x += Strumline.INITIAL_OFFSET;
				// }
				
				// opponentNote.x = FlxG.width;
				// opponentNote.x += ((Constants.STRUMLINE_X_OFFSET - opponentNote.width - (opponentStrumline.noteStyle.getStrumlineOffsets()[0]) * 2) * (opponentStrumline.strumlineNotes.length - i)); //- (opponentStrumline.noteStyle.getStrumlineOffsets()[0]) + (opponentNote.offset.x / 2)
				// opponentNote.x -= Constants.STRUMLINE_X_OFFSET + opponentNote.offset.x;
				// opponentNote.x += (opponentStrumline.noteStyle.getStrumlineOffsets()[0] + opponentNote.offset.x) / 2;
				// opponentNote.x = (FlxG.width + ((Constants.STRUMLINE_X_OFFSET - opponentNote.width - opponentStrumline.noteStyle.getStrumlineOffsets()[0]) * (opponentStrumline.strumlineNotes.length - i))
				// 	- (Constants.STRUMLINE_X_OFFSET * 1.5))
				// 	+ ((opponentStrumline.noteStyle.getStrumlineOffsets()[0] + opponentNote.offset.x) / 2);

				// opponentNote.x = FlxG.width;
				// opponentNote.x -= opponentNote.width - (opponentStrumline.noteStyle.getStrumlineOffsets()[0] + opponentNote.offset.x);
				// opponentNote.x -= Constants.STRUMLINE_X_OFFSET;
				// opponentNote.x -= ((opponentNote.width - (opponentNote.offset.x / 1.25)) + Strumline.INITIAL_OFFSET) * (3 - i);

				// for (i in 0...strumline.strumlineNotes.length) {
		
				// var note = strumline.strumlineNotes.members[i];
				// note.x += (i * (Strumline.STRUMLINE_SIZE + thisNoteSpacing));
					
				// if (Preferences.controlsScheme == "Arrows")
				// {
				// 	if (note.direction > 1)
				// 	{
				// 		note.x -= (mobilepos * 3);
				// 	}
				// }
		// }
				opponentNote.x = FlxG.width;
				// opponentNote.x -= (opponentNote.width - (opponentStrumline.noteStyle.getStrumlineOffsets()[0])) * (4 - i);
				opponentNote.x += (Strumline.NOTE_SPACING) * (i-2);
				opponentNote.x -= (((Strumline.STRUMLINE_SIZE / 2) + (Constants.STRUMLINE_X_OFFSET * 2)) * 2) - opponentStrumline.noteStyle.getStrumlineOffsets()[0];
				// if (opponentNote.direction == 2)
				// {
				// 	opponentNote.x += opponentNote.width * 0.05;
				// }
				// opponentNote.x += ;
				// if (opponentNote.direction == 2)
				// {
				// 	opponentNote.x -= opponentNote.width * 1.1;
				// }
			}
		}
	}

	function updateNoteCovers(strumline:Strumline, isPlayer:Bool = false)
	{
		if (strumline != null)
		{
			if (strumline.noteHoldCovers != null)
			{

				for (cover in strumline.noteHoldCovers)
				{
			
			
					var direction = 0;

					if (StringTools.contains(cover.glow.animation.name, "Blue"))
					{
						direction = 1;
					}
					else if (StringTools.contains(cover.glow.animation.name, "Green"))
					{
						direction = 2;
					}
					else if (StringTools.contains(cover.glow.animation.name, "Red"))
					{
						direction = 3;
					}
						
			
				
					if (isPlayer)
					{
							
						if (originalcoverx == 0)
						{
							originalcoverx = cover.x;
						}
						cover.x = originalcoverx + coverPositions[direction];			
					}
					else
					{
						// cover.x += (opponentStrumline.strumlineNotes.members[2].x - opponentStrumline.strumlineNotes.members[1].x);
						// opponentNote.x -= (opponentNote.width - (opponentStrumline.noteStyle.getStrumlineOffsets()[0])) * (4 - i);
						// cover.x = strumline.strumlineNotes.members[direction].x - strumline.strumlineNotes.members[direction].width / 2 - ((strumline.noteStyle.getHoldCoverOffsets()[0] * (isPixel ? 2 : 1))* cover.scale.x);
						if (direction > 1)
						{
							// direction - 2
							
							if (oldOppCoverPositions[direction - 2] == 0)
							{
								oldOppCoverPositions[direction -2] = cover.x;
							}
							cover.x = oldOppCoverPositions[direction-2] + (strumline.strumlineNotes.members[direction].x - oldOppPositions[direction - 2]);
							// cover.x += 200;
							// cover.x += strumline.strumlineNotes.members[direction].x - oldOppPositions[direction - 2];
						}
					}
				}
			}
		}
		

		
	
	}


	public static function positionStrumline(strumline, thisNoteSpacing)
	{
		strumline.setNoteSpacing(0);

		for (strum in strumline)
    	{
    	  strum.width /= 2;
    	}

		if (Preferences.controlsScheme == "Arrows")
		{
			mobilepos = 35 * (FlxG.width / FlxG.height) / (FlxG.initialWidth / FlxG.initialHeight);
		}
		
		for (i in 0...strumline.strumlineNotes.length) {
		
			var note = strumline.strumlineNotes.members[i];
			note.x += (i * (Strumline.STRUMLINE_SIZE + thisNoteSpacing));
			
			if (Preferences.controlsScheme == "Arrows")
			{
				if (note.direction > 1)
				{
					note.x -= (mobilepos * 3);
				}
			}
		}

		strumline.x = (FlxG.width - (4 * (Strumline.STRUMLINE_SIZE + (thisNoteSpacing / 1.3)))) / 2;//
		if (Preferences.controlsScheme == "Arrows")
		{
			strumline.x += mobilepos * 2.1;
		}
	}


}

