import funkin.play.PlayState;
import funkin.modding.module.Module;
import flixel.FlxG;
import funkin.play.notes.Strumline;
import funkin.util.Constants;
import funkin.play.notes.NoteSprite;
import flixel.text.FlxText;
import StringTools;

class Middlescroll extends Module {
	var pixeloffset:Int = 0;
	var ispixel:Int = false;

	var isMobile:Bool = false;

	var playerStrumline:FlxSprite;
	var opponentStrumline:FlxSprite;

	var debugtext:FlxText;

	var lastNoteHit = null;
	var lastOppNoteHit = null;

	function new() {
		super("Middlescroll");

	
	}

	override function onCountdownStart(event) {
	

		playerStrumline = PlayState.instance.playerStrumline;
		opponentStrumline = PlayState.instance.opponentStrumline;



		if (playerStrumline.noteStyle.id == 'pixel') {
			ispixel = true;
			pixeloffset = 55;
		} 
		else 
		{
			ispixel = false;
			pixeloffset = 0;
		}

		// if (FlxG.width > 1280)
		// {
			isMobile = true;
			hideOpponentStrumline();
		// }
	

		

		if (FlxG.save.data.middlescroll) {
			setPlayerStrumline();

			switch (FlxG.save.data.oppnotes) {
				default:
					moveOpponentStrumline();
				case "Hidden":
					hideOpponentStrumline();
			}

			if (FlxG.save.data.movepopups) {
				// Taken from Blazin'
				PlayState.instance.comboPopUps.offsets = [480, -50];
			}
		}

		debugtext = new FlxText();
        debugtext.text = FlxG.save.data.noteEffects;
        debugtext.cameras = [PlayState.instance.camHUD];
        debugtext.size = 18;
        debugtext.updateHitbox();
        debugtext.setPosition(30, FlxG.height - debugtext.height - 10);
        debugtext.zIndex = 1000;
        PlayState.instance.add(debugtext);

		super.onCountdownStart(event);

	}

	function setPlayerStrumline()
	{

		if (!isMobile)
		{
			// Taken from Blazin'
			if (playerStrumline != null) {
				playerStrumline.x = FlxG.width / 2 - playerStrumline.width / 2;
			}
		}
		else
		{
			// Done with help from Mofoy on GameBanana (https://gamebanana.com/members/4648991)
			// playerStrumline.x = FlxG.width / 2 - playerStrumline.width / 2;
			// for (i in 0...playerStrumline.strumlineNotes.length) {
			// 	var note = playerStrumline.strumlineNotes.members[i];

			// 	note.x = (FlxG.width / 2 - (playerStrumline.strumlineNotes.length * note.width) / 2) + (i * (note.width + pixeloffset)) - pixeloffset * 1.5;
			// }

			playerStrumline.x = FlxG.width / 2 - playerStrumline.width / 2;

			for (i in 0...playerStrumline.strumlineNotes.length) {
				var note = playerStrumline.strumlineNotes.members[i];
				note.x = (FlxG.width / 2 - (playerStrumline.strumlineNotes.length * note.width) / 2) + (i * note.width);
			}
		
			
		}

		switch (FlxG.save.data.noteEffects)
		{
			case "None":
				playerStrumline.noteHoldCovers.visible = false;
				playerStrumline.noteSplashes.visible = false;
			case "Splashes Only":
				playerStrumline.noteHoldCovers.visible = false;
				playerStrumline.noteSplashes.visible = true;
			case "Hold Covers Only":
				playerStrumline.noteHoldCovers.visible = true;
				playerStrumline.noteSplashes.visible = false;
			case "All":
				playerStrumline.noteHoldCovers.visible = true;
				playerStrumline.noteSplashes.visible = true;
		}
	}

	function moveOpponentStrumline() {
		opponentStrumline = PlayState.instance.opponentStrumline;
		opponentStrumline.remove(opponentStrumline.background);
		trace(opponentStrumline.noteStyle.id);


		if (opponentStrumline != null) {
			for (i in 2...opponentStrumline.strumlineNotes.members.length) {
				opponentStrumline.strumlineNotes.members[i].x = (FlxG.width
					+ ((Constants.STRUMLINE_X_OFFSET
						- opponentStrumline.strumlineNotes.members[i].width - pixeloffset) * (opponentStrumline.strumlineNotes.members.length - i))
					- (Constants.STRUMLINE_X_OFFSET * 1.5))
					+ (pixeloffset / 2);
			}
		}
	}


	function onNoteIncoming(event) {
		super.onNoteIncoming(event);

		if (isMobile)
		{
			// Done with help from Mofoy on GameBanana (https://gamebanana.com/members/4648991)

			for (note in playerStrumline.notes)
			{
				note.x = playerStrumline.strumlineNotes.members[note.direction].x + (ispixel ? 0 : note.width / 4);			
			}

			for (hold in playerStrumline.holdNotes)
			{
				var strumNote = playerStrumline.strumlineNotes.members[hold.noteDirection];
				hold.x = strumNote.x + (strumNote.width / 2) - (hold.width / 2);
			}

		
		}
		else
		{
			opponentStrumline = PlayState.instance.opponentStrumline;

			// Move incoming notes
			for (i in 0...opponentStrumline.notes.length) {
				if (opponentStrumline.notes.members[i] != null) {
					if (FlxG.save.data.oppnotes == "Translucent") {
						opponentStrumline.notes.members[i].alpha = 0.5;
					}

					if (FlxG.save.data.middlescroll) {
						opponentStrumline.notes.members[i].x = (opponentStrumline.strumlineNotes.members[opponentStrumline.notes.members[i].noteData.getDirection()].x)
							+ (opponentStrumline.notes.members[i].width / 4);
						if (ispixel) {
							opponentStrumline.notes.members[i].x = (opponentStrumline.strumlineNotes.members[opponentStrumline.notes.members[i].noteData.getDirection()].x);
						}
					}
				}
			}

			for (i in 0...opponentStrumline.holdNotes.length) {
				if (opponentStrumline.holdNotes.members[i] != null) {
					if (FlxG.save.data.oppnotes == "Translucent") {
						opponentStrumline.holdNotes.members[i].alpha = 0.5;
					}
					if (FlxG.save.data.middlescroll) {
						opponentStrumline.holdNotes.members[i].x = opponentStrumline.strumlineNotes.members[opponentStrumline.holdNotes.members[i].noteDirection].x
							+ (opponentStrumline.holdNotes.members[i].width * 1.75);
						if (ispixel) {
							opponentStrumline.holdNotes.members[i].x = opponentStrumline.strumlineNotes.members[opponentStrumline.holdNotes.members[i].noteDirection].x
								+ (opponentStrumline.holdNotes.members[i].width / 2);
						}
					}
				}
			}
			}
		
	}

	override function onNoteHit(event)
	{
		super.onNoteHit(event);

		
	
		if (event.doesNotesplash && isMobile)
		{
			event.doesNotesplash = false;
			playerStrumline.playNoteSplash(event.note.direction);

			for (splash in playerStrumline.noteSplashes)
			{
				if (StringTools.contains(splash.animation.name, "LEFT"))
				{
					splash.x = playerStrumline.strumlineNotes.members[0].x;
				}
				else if (StringTools.contains(splash.animation.name, "DOWN"))
				{
					splash.x = playerStrumline.strumlineNotes.members[1].x;

				}
				else if (StringTools.contains(splash.animation.name, "UP"))
				{
					splash.x = playerStrumline.strumlineNotes.members[2].x;

				}
				else if (StringTools.contains(splash.animation.name, "RIGHT"))
				{
					splash.x = playerStrumline.strumlineNotes.members[3].x;

				}
			}
			debugtext.text = playerStrumline.noteSplashes.members[playerStrumline.noteSplashes.length - 1].animation.name;
		}
		if (!event.note.noteData.getMustHitNote() && event.note.holdNoteSprite != null)
		{
			lastOppNoteHit = event.note;
		}

		if (event.note.noteData.getMustHitNote() && event.note.holdNoteSprite != null)
		{
			lastNoteHit = event.note;
		}
	}

	override function onUpdate() {
	
			
	
		if (PlayState.instance != null) {
			if (FlxG.save.data.middlescroll) {
				opponentStrumline = PlayState.instance.opponentStrumline;
				// noteHoldCoversthing();
				updateOpponentNoteCovers();
				if (isMobile)
				{
					updatePlayerNoteCovers();
				}
			}

			if (FlxG.save.data.oppnotes == "Translucent") {
				opponentStrumline.alpha = 0.5;
				if (opponentStrumline.strumlineNotes != null) {
					for (i in 0...opponentStrumline.strumlineNotes.members.length) {
						opponentStrumline.strumlineNotes.members[i].alpha = 0.5;
					}
				}
			}
			// debugtext.text = "ismobile: " + isMobile;

		}
		super.onUpdate();


	}
	
	function updateOpponentNoteCovers()
	{
		if (opponentStrumline.noteHoldCovers != null) {
			for (i in 0...opponentStrumline.noteHoldCovers.members.length) {
				var pos = opponentStrumline.noteHoldCovers.members[i].x;
				switch (pos) {
					case -62:
						opponentStrumline.noteHoldCovers.members[i].x = opponentStrumline.strumlineNotes.members[0].x
							- (opponentStrumline.strumlineNotes.members[i].width / 2);
					case 50:
						opponentStrumline.noteHoldCovers.members[i].x = opponentStrumline.strumlineNotes.members[1].x
							- (opponentStrumline.strumlineNotes.members[i].width / 2);
					case 162:
						opponentStrumline.noteHoldCovers.members[i].x = opponentStrumline.strumlineNotes.members[2].x
							- (opponentStrumline.strumlineNotes.members[i].width / 2);
					case 274:
						opponentStrumline.noteHoldCovers.members[i].x = opponentStrumline.strumlineNotes.members[3].x
							- (opponentStrumline.strumlineNotes.members[i].width / 2);
				}
			}
		}
	}
	function updatePlayerNoteCovers()
	{
		if (lastNoteHit != null)
		{
			var hold = lastNoteHit.holdNoteSprite;
			if (hold.cover != null)
			{
				hold.cover.x = playerStrumline.x + (ispixel ? 0 : lastNoteHit.x - lastNoteHit.width);
			}
		}
		
	
	}
	// Taken from Blazin'
	function hideOpponentStrumline() {
		if (opponentStrumline != null) {
			for (arrow in opponentStrumline.members) {
				if (arrow != null)
				{
					arrow.visible = false;
				}
			}
		}
	}
}

