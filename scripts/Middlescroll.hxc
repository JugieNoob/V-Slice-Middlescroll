import funkin.play.PlayState;
import funkin.modding.module.Module;
import flixel.FlxG;
import funkin.play.notes.Strumline;
import funkin.util.Constants;
import StringTools;
import flixel.text.FlxText;
import funkin.Preferences;

class Middlescroll extends Module {
	var noteOffset:Int = 0;
	var isPixel:Int = false;

	var isMobile:Bool = false;

	var playerStrumline:FlxSprite;
	var opponentStrumline:FlxSprite;

	var debugtext:FlxText;


	function new() {
		super("Middlescroll");
	}
	
	// ----- Override Functions
	override function onUpdate() {

		super.onUpdate();
		if (PlayState.instance != null) {

			if (FlxG.save.data.middlescroll != "Off") {
				if (isMobile)
				{
					updateNoteCovers(playerStrumline);
				}
				else if (FlxG.save.data.middlescroll == "Wide Lanes")
				{
					updateNoteCovers(playerStrumline);
					updateNoteCovers(opponentStrumline);
				}
				else
				{
					updateNoteCovers(opponentStrumline);
				}
			}
			
			if (FlxG.save.data.oppnotes == "Translucent") {
				if (opponentStrumline != null)
				{
					opponentStrumline.alpha = 0.5;
					if (opponentStrumline.strumlineNotes != null) {
						for (note in opponentStrumline.strumlineNotes)
						{
							note.alpha = 0.5;
						}
					}
				}
			
			}

		}
	}

	override function onCountdownStart(event) {
		super.onCountdownStart(event);

		playerStrumline = PlayState.instance.playerStrumline;
		opponentStrumline = PlayState.instance.opponentStrumline;


		isPixel = playerStrumline.noteStyle.isHoldNotePixel();
		var strumOffset = playerStrumline.noteStyle.getStrumlineOffsets();
		noteOffset = strumOffset[0] + strumOffset[1];


		if (FlxG.width > 1280 && Preferences.controlsScheme == "Arrows")
		{
			isMobile = true;	
		}
	

		

		if (FlxG.save.data.movepopups) {
			// Taken from Blazin'
			PlayState.instance.comboPopUps.offsets = [480, -50];
		}

		
		if (FlxG.save.data.middlescroll != "Off") {
			setPlayerStrumline();
			if (!isMobile)
			{
				moveOpponentStrumline();
			}

			playerStrumline.background.scale.x = (playerStrumline.strumlineNotes.width / 2) + noteOffset;
			playerStrumline.background.updateHitbox();
			playerStrumline.background.x = playerStrumline.strumlineNotes.members[0].x - (noteOffset / 1.25);
		}

		if (FlxG.save.data.oppnotes == "Hidden") {
			hideOpponentStrumline();
		}

		debugtext = new FlxText();
        // debugtext.text = "Combo: " + combo + "\nSong Position: " + Conductor.instance.songPosition + "\nnotehittime: " + notehittime + "\nholdnoteend: " + holdnoteend + "\nholdnoteendtime: " + holdnoteendtime +"\ncurrent step: " + Conductor.instance.currentStep + "\nhashitnote: " + hashitnote + "\nscreen width: " + FlxG.width;
        debugtext.cameras = [PlayState.instance.camHUD];
        debugtext.size = 18;
        debugtext.updateHitbox();
        debugtext.setPosition(30, FlxG.height - debugtext.height - 10);
        debugtext.zIndex = 1000;
        PlayState.instance.add(debugtext);

	

	}

	override function onNoteIncoming(event) {
		super.onNoteIncoming(event);

		if (isMobile || FlxG.save.data.middlescroll == "Wide Lanes")
		{
			// Done with help from Mofoy on GameBanana (https://gamebanana.com/members/4648991)

			// for (note in playerStrumline.notes)
			// {
			//+ (noteOffset > 0 ? 0 : note.width / 4)
			// moveIncomingNote(event.note, playerStrumline);
			// }
		


			// for (hold in playerStrumline.holdNotes)					
			// {
				// var strumNote = playerStrumline.strumlineNotes.members[hold.noteDirection];
				// hold.x = strumNote.x + (strumNote.width / 2) - (hold.width / 2);
			// }		
		}

		if (!isMobile)
		{
			// for (note in opponentStrumline.notes)
			// {
			// 	note.x = opponentStrumline.strumlineNotes.members[note.direction].x + (note.width / 3) - note.offset.x;	 //+ (noteOffset > 0 ? 0 : note.width / 4)
			// }
			// for (hold in opponentStrumline.holdNotes)
			// {
			// 	var strumNote = opponentStrumline.strumlineNotes.members[hold.noteDirection];
			// 	hold.x = strumNote.x + (strumNote.width / 2) - (hold.width / 2);			
			// }
			// moveIncomingNote()
		}

		if (FlxG.save.data.oppnotes == "Translucent")
		{
			translucentOpponentNotes();
		}
	}

	override function onNoteHit(event)
	{
		super.onNoteHit(event);

		if (FlxG.save.data.middlescroll != "Off")
		{
			if (event.doesNotesplash)
			{
				if (isMobile || FlxG.save.data.middlescroll == "Wide Lanes")
				{
					event.doesNotesplash = false;
					playerStrumline.playNoteSplash(event.note.direction);
					
					for (splash in playerStrumline.noteSplashes)
					{
						if (StringTools.contains(splash.animation.name, "LEFT"))
						{
							splash.x = playerStrumline.strumlineNotes.members[0].x + noteOffset;
						}
						else if (StringTools.contains(splash.animation.name, "DOWN"))
						{
							splash.x = playerStrumline.strumlineNotes.members[1].x + noteOffset;
						}
						else if (StringTools.contains(splash.animation.name, "UP"))
						{
							splash.x = playerStrumline.strumlineNotes.members[2].x + noteOffset;
						}
						else if (StringTools.contains(splash.animation.name, "RIGHT"))
						{
							splash.x = playerStrumline.strumlineNotes.members[3].x + noteOffset;
						}
					}
				}
			
			}
		}

	}

	// ----- Custom Functions

	function setPlayerStrumline()
	{

		// playerStrumline.x = FlxG.width / 2 - playerStrumline.width / 2;

		// if (isMobile && FlxG.save.data.middlescroll == "Wide Lanes")
		// {
		// 	for (i in 0...playerStrumline.strumlineNotes.length) {
		// 		var note = playerStrumline.strumlineNotes.members[i];
		// 		note.x = (FlxG.width / 2 - (playerStrumline.strumlineNotes.length * note.width / 1.75)) + (i * (note.width + noteOffset) * 1.25) - (noteOffset * 1.5);
		// 	}
		// }
		// else if (isMobile || FlxG.save.data.middlescroll == "Wide Lanes")
		// {
		// 	// Done with help from Mofoy on GameBanana (https://gamebanana.com/members/4648991)
		// 	for (i in 0...playerStrumline.strumlineNotes.length) {
		// 		var note = playerStrumline.strumlineNotes.members[i];

		// 		note.x = (FlxG.width / 2 - (playerStrumline.strumlineNotes.length * note.width) / 2) + (i * (note.width + noteOffset)) - noteOffset * 1.5;
		// 	}
		// }


		playerStrumline.setNoteSpacing(2);
		playerStrumline.x = FlxG.width / 2 - playerStrumline.width / 2;


		switch (FlxG.save.data.noteEffects)
		{
			case "None":
				playerStrumline.noteHoldCovers.visible = false;
				playerStrumline.noteSplashes.visible = false;
			case "Splashes Only":
				playerStrumline.noteHoldCovers.visible = false;
				playerStrumline.noteSplashes.visible = true;
			case "Hold Covers Only":
				playerStrumline.noteHoldCovers.visible = true;
				playerStrumline.noteSplashes.visible = false;
			case "All":
				playerStrumline.noteHoldCovers.visible = true;
				playerStrumline.noteSplashes.visible = true;
		}
	

	}

	function moveOpponentStrumline() {
		opponentStrumline.remove(opponentStrumline.background);

		if (opponentStrumline != null) {
			for (i in 2...opponentStrumline.strumlineNotes.members.length) {
				opponentStrumline.strumlineNotes.members[i].x = (FlxG.width
					+ ((Constants.STRUMLINE_X_OFFSET
						- opponentStrumline.strumlineNotes.members[i].width - noteOffset) * (opponentStrumline.strumlineNotes.members.length - i))
					- (Constants.STRUMLINE_X_OFFSET * 1.5))
					+ (noteOffset / 2);
			}
		}
	}

	function updateNoteCovers(strumline)
	{
		var direction = 0;
		if (strumline != null)
		{
			if (strumline.noteHoldCovers != null)
			{
				for (cover in strumline.noteHoldCovers)
				{
				
					if (StringTools.contains(cover.glow.animation.name, "Blue"))
					{
						direction = 1;
					}
					else if (StringTools.contains(cover.glow.animation.name, "Green"))
					{
						direction = 2;
					}
					else if (StringTools.contains(cover.glow.animation.name, "Red"))
					{
						direction = 3;
					}
					else
					{
						direction = 0;
					}

					var note = strumline.strumlineNotes.members[direction];
					cover.glow.x = note.x - note.width / 2 - ((strumline.noteStyle.getHoldCoverOffsets()[0] * (isPixel ? 2 : 1))* cover.scale.x) + (isPixel ? strumline.noteStyle.getHoldCoverOffsets()[0] - 12: -noteOffset);

				}
			}
		}
		

		
	
	}
	// Taken from Blazin'
	function hideOpponentStrumline() {
		if (opponentStrumline != null) {
			opponentStrumline.visible = false;
		}
	}

	function translucentOpponentNotes()
	{
		// Move incoming notes
		for (note in opponentStrumline.notes)
		{
			note.alpha = 0.5;
		}
		for (hold in opponentStrumline.holdNotes)
		{
			hold.alpha = 0.5;
		}
		
	}

	function moveIncomingNote(note, strumline)
	{
		// note.updateHitbox();
		
		// note.x = opponentStrumline.strumlineNotes.members[note.direction].x + (note.width / 3) - note.offset.x;
		// note.offset.x = 0;
		// strumline.strumlineNotes.members[0].offset.x = 0;
		// note.x = (strumline.strumlineNotes.members[note.direction].x + strumline.strumlineNotes.members[0].offset.x) + (strumline.noteStyle.getStrumlineOffsets() * note.scale.x); //  * note.scale.x + (strumline.NUDGE * 6);
		// note.offset.x = strumline.strumlineNotes.members[note.direction].offset.x;
		// if (strumline.noteStyle.getName() == "Funkin'")
		// {
		// 	note.x += (note.width / 4);
		// }

		// OLD: note.x = playerStrumline.strumlineNotes.members[note.direction].x + (noteOffset > 0 ? 0 : note.width / 4);			
		// LATEST: note.x = strumline.strumlineNotes.members[note.direction].x + ((strumline.noteStyle.getStrumlineOffsets()[0] * (note.scale.x / 4) * strumline.noteStyle.getNoteScale())) + (note.offset.x * (strumline.noteStyle.getNoteScale() / 6)); //;			 + (note.offset.x * 1.25) - (strumline.NUDGE * note.scale.x);

		// note.x = getXPos(note.direction, strumline) + strumline.strumlineNotes.x;
		// note.x += 

		// note.x = strumline.strumlineNotes.members[note.direction].x + ((strumline.noteStyle.getStrumlineOffsets()[0] + note.offset.x) / (note.scale.x * 2)) ;
		
		// note.x = playerStrumline.strumlineNotes.members[note.direction].x + (note.offset.x >= 23.55 ? -note.offset.x  : note.offset.x);

		// strumline.setNoteSpacing();
		// note.x = getXPos(note.direction, strumline);
		var strumnote = strumline.strumlineNotes.members[direction];
		note.x = strumnote.x - strumnote.width / 2 - ((strumline.noteStyle.getStrumlineOffsets()[0] * (isPixel ? 2 : 1))* note.x) + (isPixel ? strumline.noteStyle.getStrumlineOffsets()[0] - 12: -noteOffset);


		debugtext.text = "note.scale.x: " + note.scale.x + " strumline.x: " + strumline.x + " strumline.strumlineNotes.x: " + strumline.strumlineNotes.x + "note offset: " + note.offset.x + "\nGet Strum offs: " + strumline.noteStyle.getStrumlineOffsets();
	}
	
	// function getXPos(direction, strumline):Float
  	// {
  	//   var pos:Float = 0;
	//   var noteSpace = strumline.strumlineNotes.members[1].x - (strumline.strumlineNotes.members[0].x + strumline.strumlineNotes.members[0].width);
   	//   return switch (direction)
  	//   {
  	//     case 0: -pos * 2;
  	//     case 1:
  	//       -(pos * 2) + (1 * noteSpace) * (strumline.noteSpacingScale * strumline.strumlineScale.x);
  	//     case 2:
  	//       pos + (2 * noteSpace) * (strumline.noteSpacingScale * strumline.strumlineScale.x);
  	//     case 3:
  	//       pos + (3 * noteSpace) * (strumline.noteSpacingScale * strumline.strumlineScale.x);
  	//     default: -pos * 2;
  	//   }
  	// }

	// function getXPos(direction, strumline):Float
  	// {
    // var pos:Float = 0;
    // return switch (direction)
    // {
    //   case 0: -pos * 2;
    //   case 1:
    //     -(pos * 2) + (1 * strumline.NOTE_SPACING) * (strumline.noteSpacingScale * strumline.strumlineScale.x);
    //   case 2:
    //     pos + (2 * strumline.NOTE_SPACING) * (strumline.noteSpacingScale * strumline.strumlineScale.x);
    //   case 3:
    //     pos + (3 * strumline.NOTE_SPACING) * (strumline.noteSpacingScale * strumline.strumlineScale.x);
    //   default: -pos * 2;
    // }
  	// }


}

