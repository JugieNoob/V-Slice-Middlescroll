import funkin.modding.module.Module;
import funkin.ui.options.PreferencesMenu;
import funkin.ui.options.OptionsState;
import flixel.FlxG;
import Std;

class MiddlescrollOptions extends Module {
    
    public static var isMobile = true;

    function new (){
        super("Middlescroll Options", 21);

        if (FlxG.save.data.middlescroll == null)
        {
            FlxG.save.data.middlescroll = true;
        }
        if (FlxG.save.data.wideLane == null)
        {
            FlxG.save.data.wideLane = false;
        }
        if (FlxG.save.data.movepopups == null)
        {
            FlxG.save.data.movepopups = true;
        }
        if (FlxG.save.data.oppnotes == null)
        {
            FlxG.save.data.oppnotes = "Visible";
        }
        if (FlxG.save.data.noteEffects == null)
        {
            FlxG.save.data.noteEffects = "All";
        }

        if (FlxG.save.data.middlescroll == true)
        {
            FlxG.save.data.middlescroll = "On";
        }

        if (FlxG.save.data.middlescroll == false)
        {
            FlxG.save.data.middlescroll = "Off";
        }

    }

    function onStateChangeEnd(event)
    {
        super.onStateChangeEnd(event);

        if (Std.isOfType(event.targetState, OptionsState))
        {
            var preferences = event.targetState.optionsCodex.pages.get("preferences");

            if (isMobile)
            {
                preferences.createPrefItemEnum('Middlescroll', "Center the player's strumline.", ["On" => "On", "Off" => "Off", "Wide Lanes" => "Wide Lanes", "Narrow Lanes" => "Narrow Lanes"], function(value:Bool):Void {
                    FlxG.save.data.middlescroll = value;
                    FlxG.save.flush();
                }, FlxG.save.data.middlescroll);     
                 
            }
            else
            {
                preferences.createPrefItemEnum('Middlescroll', "Center the player's strumline.", ["On" => "On", "Off" => "Off", "Wide Lanes" => "Wide Lanes"], function(value:Bool):Void {
                    FlxG.save.data.middlescroll = value;
                    FlxG.save.flush();
                }, FlxG.save.data.middlescroll);    
            }
     

            preferences.createPrefItemCheckbox('Move Popups', 'Moves the rating and combo popups.', function(value:Bool):Void {
            FlxG.save.data.movepopups = value;
            FlxG.save.flush();

            }, FlxG.save.data.movepopups);
            

            preferences.createPrefItemEnum('Opponent Notes', 'Set what should happen to the opponent notes', ["Visible" => "Visible", "Translucent" => "Translucent", "Hidden" => "Hidden"], function(value:Bool):Void {
                FlxG.save.data.oppnotes = value;
                FlxG.save.flush();
            }, FlxG.save.data.oppnotes);      
            
       

            preferences.createPrefItemEnum('Note Effects', 'Toggles Note Splashes and Note Hold Covers', ["None" => "None", "Splashes Only" => "Splashes Only", "Hold Covers Only" => "Hold Covers Only", "All" => "All"], function(value:Bool):Void {
                    FlxG.save.data.noteEffects = value;
                    FlxG.save.flush();
    
                }, FlxG.save.data.noteEffects);      

        }
    }


}
